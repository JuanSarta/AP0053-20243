{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOZHi4tQwx1P3pyNJxb3run"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"d4NxT2LwF3Cr","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1725656571811,"user_tz":300,"elapsed":312,"user":{"displayName":"Juan Sarta","userId":"04879527621587975078"}},"outputId":"cbf4102f-7ceb-482d-cd7c-8600cee74b7d"},"outputs":[{"output_type":"stream","name":"stdout","text":["['Rojo', 'Azul', 'Amarillo', 'Naranja', 'Violeta', 'Verde']\n","<class 'list'>\n","Amarillo\n","my_lista size:  6\n","['Rojo', 'Azul']\n","['Rojo', 'Azul']\n"]}],"source":["#Creación y manipulación básica de listas\n","\n","my_lista = ['Rojo', 'Azul', 'Amarillo', 'Naranja', 'Violeta', 'Verde']\n","print(my_lista)  # Imprime la lista completa\n","print(type(my_lista))  # Imprime el tipo de dato (list)\n","print(my_lista[2])  # Imprime el tercer elemento de la lista\n","\n","# Operaciones básicas sobre listas\n","print(\"my_lista size: \", len(my_lista))  # Imprime la longitud de la lista\n","print(my_lista[0:2])  # Imprime los primeros dos elementos (rango 0-2)\n","print(my_lista[:2])  # Otra forma de imprimir los primeros dos elementos"]},{"cell_type":"code","source":["#Modificación de listas (Agregar, insertar y extender)\n","\n","my_lista.append('Blanco')  # Agrega un nuevo elemento al final\n","print(my_lista)\n","\n","my_lista.insert(3, 'Negro')  # Inserta un nuevo elemento en la posición 3\n","print(my_lista)\n","\n","my_lista.extend(['Marron', 'Gris'])  # Extiende la lista concatenando otra lista\n","print(my_lista)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6KEsCQSeIXHP","executionInfo":{"status":"ok","timestamp":1725656706214,"user_tz":300,"elapsed":267,"user":{"displayName":"Juan Sarta","userId":"04879527621587975078"}},"outputId":"464f7e34-3cd8-4b9a-a6bd-30090db7d992"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["['Rojo', 'Azul', 'Amarillo', 'Negro', 'Naranja', 'Violeta', 'Verde', 'Blanco', 'Marron', 'Gris', 'Blanco']\n","['Rojo', 'Azul', 'Amarillo', 'Negro', 'Negro', 'Naranja', 'Violeta', 'Verde', 'Blanco', 'Marron', 'Gris', 'Blanco']\n","['Rojo', 'Azul', 'Amarillo', 'Negro', 'Negro', 'Naranja', 'Violeta', 'Verde', 'Blanco', 'Marron', 'Gris', 'Blanco', 'Marron', 'Gris']\n"]}]},{"cell_type":"code","source":["#Búsqueda y eliminación de elementos en listas\n","\n","print(my_lista.index('Azul'))  # Encuentra el índice de un elemento\n","\n","# Eliminación de elementos\n","# my_lista.remove('Magenta')\n","my_lista.remove('Marron')  # Elimina el primer 'Marron' encontrado\n","print(my_lista)\n","\n","my_lista.insert(8, 'Marron')  # Inserta 'Marron' nuevamente en la posición 8\n","print(my_lista)\n","\n","print(my_lista.pop())  # Elimina y devuelve el último elemento\n","size = len(my_lista)\n","print(\"size = \", size)"],"metadata":{"id":"eU6vNu7MJmkV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Multiplicación de listas y ordenamiento\n","\n","my_lista_3 = my_lista * 3  # Multiplica la lista por 3 (repite su contenido)\n","print(\"my_lista_3: \", my_lista_3)\n","\n","# Ordenar la lista\n","print(\"Sort:\")\n","my_listaSort = my_lista.sort()  # Ordena la lista de manera alfabética\n","print(my_listaSort)  # Imprime None porque sort() no retorna nada, pero modifica la lista"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vUpjool2J8TK","executionInfo":{"status":"ok","timestamp":1725656822785,"user_tz":300,"elapsed":295,"user":{"displayName":"Juan Sarta","userId":"04879527621587975078"}},"outputId":"cca78067-cffe-4326-b11c-c8e3446bcd67"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["my_lista_3:  ['Rojo', 'Azul', 'Amarillo', 'Negro', 'Negro', 'Naranja', 'Violeta', 'Verde', 'Blanco', 'Marron', 'Gris', 'Blanco', 'Marron', 'Gris', 'Rojo', 'Azul', 'Amarillo', 'Negro', 'Negro', 'Naranja', 'Violeta', 'Verde', 'Blanco', 'Marron', 'Gris', 'Blanco', 'Marron', 'Gris', 'Rojo', 'Azul', 'Amarillo', 'Negro', 'Negro', 'Naranja', 'Violeta', 'Verde', 'Blanco', 'Marron', 'Gris', 'Blanco', 'Marron', 'Gris']\n","Sort:\n","None\n"]}]},{"cell_type":"code","source":["#Ordenamiento de listas numéricas\n","\n","my_NumList = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n","print(\"Ordering my_NumList: \")\n","my_NumList.sort()  # Ordena la lista numérica de menor a mayor\n","print(my_NumList)\n","\n","# Ordenando de mayor a menor\n","my_NumList.sort(reverse=True)  # Ordena la lista numérica de mayor a menor\n","print(\"De mayor a menor: \", my_NumList)"],"metadata":{"id":"oDXjqlEqK4Tl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Introducción a tuplas\n","\n","# Las tuplas son inmutables, es decir, no se pueden modificar una vez creadas\n","print(\"###########################\")\n","print(\"############TUPLAS#########\")\n","\n","# Convertir una lista a tupla\n","my_tupla = tuple(my_lista)\n","print(\"my_tuple: \", my_tupla)\n","\n","print(my_tupla[0])  # Acceder a elementos por índice\n","print(my_tupla[2])"],"metadata":{"id":"1iK4-O_iLB4I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Operaciones con tuplas\n","\n","# Verificar si un elemento está contenido en la tupla\n","print('Rojo' in my_tupla)  # Devuelve True si 'Rojo' está en la tupla\n","print(my_tupla.count('Rojo'))  # Cuenta cuántas veces aparece 'Rojo'\n","\n","# Tupla con un solo elemento\n","my_tupla_unitaria = ('Blanco',)\n","print(my_tupla_unitaria)"],"metadata":{"id":"nm59xhwgLmKU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Empaquetado y desempaquetado de tuplas\n","\n","# Empaquetado de tupla\n","my_tupla = 'Gaspar', 5, 8, 1999  # Empaquetar valores en una tupla sin paréntesis\n","print(my_tupla)\n","\n","# Desempaquetado de tupla\n","nombre, dia, mes, año = my_tupla  # Desempaquetar los valores en variables\n","print(nombre)\n","print(dia)\n","print(mes)\n","print(año)\n","\n","# Mostrar los valores desempaquetados\n","print(\"Nombre: \", nombre, \" - Dia:\", dia, \" - Mes: \", mes, \"- Año: \", año)"],"metadata":{"id":"2NRIwe2lMBfK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Convertir una tupla a lista\n","my_lista2 = list(my_tupla)  # Convierte la tupla en una lista\n","print(my_lista2)"],"metadata":{"id":"nz98j6lpMOe7"},"execution_count":null,"outputs":[]}]}